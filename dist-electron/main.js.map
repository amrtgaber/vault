{"version":3,"file":"main.js","sources":["../electron/main.ts"],"sourcesContent":["import { app, BrowserWindow, ipcMain } from 'electron'\nimport { VaultItem } from 'electron/preload'\nimport { dirname, join } from 'path'\nimport { fileURLToPath } from 'url'\n\nconst __dirname = dirname(fileURLToPath(import.meta.url))\n\nconst isDev = process.env.NODE_ENV === 'development'\n\nfunction createWindow(): void {\n  const mainWindow = new BrowserWindow({\n    width: 1200,\n    height: 800,\n    webPreferences: {\n      preload: join(__dirname, 'preload.js'),\n      nodeIntegration: false,\n      contextIsolation: true,\n    },\n  })\n\n  if (isDev) {\n    mainWindow.loadURL('http://localhost:5173')\n    mainWindow.webContents.openDevTools()\n  } else {\n    mainWindow.loadFile(join(__dirname, '../dist/index.html'))\n  }\n}\n\napp.whenReady().then(() => {\n  createWindow()\n\n  app.on('activate', function () {\n    if (BrowserWindow.getAllWindows().length === 0) createWindow()\n  })\n})\n\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') app.quit()\n})\n\n// Example IPC handlers for Node.js functionality\nipcMain.handle('get-app-version', () => {\n  return app.getVersion()\n})\n\nipcMain.handle('read-file', async (_, filePath: string) => {\n  const fs = await import('fs/promises')\n  try {\n    const content = await fs.readFile(filePath, 'utf-8')\n    return { success: true, content }\n  } catch (error) {\n    return { success: false, error: (error as Error).message }\n  }\n})\n\nipcMain.handle('write-file', async (_, filePath: string, content: string) => {\n  const fs = await import('fs/promises')\n  try {\n    await fs.writeFile(filePath, content, 'utf-8')\n    return { success: true }\n  } catch (error) {\n    return { success: false, error: (error as Error).message }\n  }\n})\n\nipcMain.handle('get-vault-items', async () => {\n  const fs = await import('fs/promises')\n  const path = await import('path')\n  try {\n    const appPath = app.getAppPath()\n    const itemsPath = isDev\n      ? path.join(appPath, 'vault-items.json')\n      : path.join(path.dirname(app.getPath('exe')), 'data/vault-items.json')\n\n    let content: string\n    try {\n      content = await fs.readFile(itemsPath, 'utf-8')\n    } catch {\n      // File doesn't exist, create empty vault file\n      const emptyVault = { items: [] }\n      const emptyContent = JSON.stringify(emptyVault, null, 2)\n\n      // Ensure directory exists\n      await fs.mkdir(path.dirname(itemsPath), { recursive: true })\n      await fs.writeFile(itemsPath, emptyContent, 'utf-8')\n\n      content = emptyContent\n    }\n\n    const data = JSON.parse(content)\n    return { success: true, items: data.items }\n  } catch (error) {\n    return { success: false, error: (error as Error).message, items: [] }\n  }\n})\n\nipcMain.handle(\n  'add-vault-item',\n  async (\n    _,\n    itemData: { name: string; artist: string; description: string }\n  ) => {\n    const fs = await import('fs/promises')\n    const path = await import('path')\n    try {\n      const appPath = app.getAppPath()\n      const itemsPath = isDev\n        ? path.join(appPath, 'vault-items.json')\n        : path.join(path.dirname(app.getPath('exe')), 'data/vault-items.json')\n\n      // Read current data\n      let content: string\n      try {\n        content = await fs.readFile(itemsPath, 'utf-8')\n      } catch {\n        // File doesn't exist, create empty vault\n        const emptyVault = { items: [] }\n        content = JSON.stringify(emptyVault, null, 2)\n        await fs.mkdir(path.dirname(itemsPath), { recursive: true })\n      }\n\n      const data = JSON.parse(content)\n\n      // Generate new ID (simple incrementing ID)\n      const maxId =\n        data.items.length > 0\n          ? Math.max(...data.items.map((item: VaultItem) => item.id))\n          : 0\n      const newItem = {\n        id: maxId + 1,\n        ...itemData,\n      }\n\n      // Add new item\n      data.items.push(newItem)\n\n      // Write back to file\n      await fs.writeFile(itemsPath, JSON.stringify(data, null, 2), 'utf-8')\n\n      return { success: true, item: newItem }\n    } catch (error) {\n      return { success: false, error: (error as Error).message }\n    }\n  }\n)\n\nipcMain.handle(\n  'update-vault-item',\n  async (\n    _,\n    id: number,\n    itemData: { name: string; artist: string; description: string }\n  ) => {\n    const fs = await import('fs/promises')\n    const path = await import('path')\n    try {\n      const appPath = app.getAppPath()\n      const itemsPath = isDev\n        ? path.join(appPath, 'vault-items.json')\n        : path.join(path.dirname(app.getPath('exe')), 'data/vault-items.json')\n\n      // Read current data\n      const content = await fs.readFile(itemsPath, 'utf-8')\n      const data = JSON.parse(content)\n\n      // Find and update item\n      const itemIndex = data.items.findIndex(\n        (item: VaultItem) => item.id === id\n      )\n      if (itemIndex === -1) {\n        return { success: false, error: 'Item not found' }\n      }\n\n      // Update item while preserving ID\n      data.items[itemIndex] = {\n        id,\n        ...itemData,\n      }\n\n      // Write back to file\n      await fs.writeFile(itemsPath, JSON.stringify(data, null, 2), 'utf-8')\n\n      return { success: true, item: data.items[itemIndex] }\n    } catch (error) {\n      return { success: false, error: (error as Error).message }\n    }\n  }\n)\n\nipcMain.handle(\n  'get-item-image',\n  async (_, itemName: string, artist: string) => {\n    const fs = await import('fs/promises')\n    const path = await import('path')\n    try {\n      // Create filename from item name and artist\n      const filename = `${itemName}-${artist}`.replace(/[^a-zA-Z0-9-]/g, '_')\n\n      // Look for images in the images directory\n      const appPath = app.getAppPath()\n      const imagesDir = isDev\n        ? path.join(appPath, 'src', 'images')\n        : path.join(path.dirname(app.getPath('exe')), 'data/images')\n\n      // Try different image extensions\n      const extensions = ['.jpg', '.jpeg', '.png', '.webp', '.svg']\n\n      for (const ext of extensions) {\n        const imagePath = path.join(imagesDir, filename + ext)\n        try {\n          const imageBuffer = await fs.readFile(imagePath)\n          const base64 = imageBuffer.toString('base64')\n          const mimeType =\n            ext === '.png'\n              ? 'image/png'\n              : ext === '.webp'\n                ? 'image/webp'\n                : ext === '.svg'\n                  ? 'image/svg+xml'\n                  : 'image/jpeg'\n          return {\n            success: true,\n            image: `data:${mimeType};base64,${base64}`,\n            filename: filename + ext,\n          }\n        } catch {\n          // Continue to next extension\n        }\n      }\n\n      return { success: false, error: 'Image not found', image: null }\n    } catch (error) {\n      return { success: false, error: (error as Error).message, image: null }\n    }\n  }\n)\n"],"names":[],"mappings":"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"}