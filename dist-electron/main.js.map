{"version":3,"file":"main.js","sources":["../electron/main.ts"],"sourcesContent":["import { app, BrowserWindow, ipcMain } from 'electron'\nimport { dirname, join } from 'path'\nimport { fileURLToPath } from 'url'\n\nconst __dirname = dirname(fileURLToPath(import.meta.url))\n\nconst isDev = process.env.NODE_ENV === 'development'\n\nfunction createWindow(): void {\n  const mainWindow = new BrowserWindow({\n    width: 1200,\n    height: 800,\n    webPreferences: {\n      preload: join(__dirname, 'preload.js'),\n      nodeIntegration: false,\n      contextIsolation: true,\n    },\n  })\n\n  if (isDev) {\n    mainWindow.loadURL('http://localhost:5173')\n    mainWindow.webContents.openDevTools()\n  } else {\n    mainWindow.loadFile(join(__dirname, '../dist/index.html'))\n  }\n}\n\napp.whenReady().then(() => {\n  createWindow()\n\n  app.on('activate', function () {\n    if (BrowserWindow.getAllWindows().length === 0) createWindow()\n  })\n})\n\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') app.quit()\n})\n\n// Example IPC handlers for Node.js functionality\nipcMain.handle('get-app-version', () => {\n  return app.getVersion()\n})\n\nipcMain.handle('read-file', async (_, filePath: string) => {\n  const fs = await import('fs/promises')\n  try {\n    const content = await fs.readFile(filePath, 'utf-8')\n    return { success: true, content }\n  } catch (error) {\n    return { success: false, error: (error as Error).message }\n  }\n})\n\nipcMain.handle('write-file', async (_, filePath: string, content: string) => {\n  const fs = await import('fs/promises')\n  try {\n    await fs.writeFile(filePath, content, 'utf-8')\n    return { success: true }\n  } catch (error) {\n    return { success: false, error: (error as Error).message }\n  }\n})\n\nipcMain.handle('get-vault-items', async () => {\n  const fs = await import('fs/promises')\n  const path = await import('path')\n  try {\n    // In production, look for vault-items.json next to the executable\n    // In development, look in the project root\n    const appPath = app.getAppPath()\n    const itemsPath = isDev \n      ? path.join(appPath, 'vault-items.json')\n      : path.join(path.dirname(app.getPath('exe')), 'vault-items.json')\n    \n    const content = await fs.readFile(itemsPath, 'utf-8')\n    const data = JSON.parse(content)\n    return { success: true, items: data.items }\n  } catch (error) {\n    return { success: false, error: (error as Error).message, items: [] }\n  }\n})\n\nipcMain.handle('get-item-image', async (_, itemName: string, artist: string) => {\n  const fs = await import('fs/promises')\n  const path = await import('path')\n  try {\n    // Create filename from item name and artist\n    const filename = `${itemName}-${artist}`.replace(/[^a-zA-Z0-9-]/g, '_')\n    \n    // Look for images in the images directory\n    const appPath = app.getAppPath()\n    const imagesDir = isDev \n      ? path.join(appPath, 'src', 'images')\n      : path.join(path.dirname(app.getPath('exe')), 'images')\n    \n    // Try different image extensions\n    const extensions = ['.jpg', '.jpeg', '.png', '.webp', '.svg']\n    \n    for (const ext of extensions) {\n      const imagePath = path.join(imagesDir, filename + ext)\n      try {\n        const imageBuffer = await fs.readFile(imagePath)\n        const base64 = imageBuffer.toString('base64')\n        const mimeType = ext === '.png' ? 'image/png' : \n                        ext === '.webp' ? 'image/webp' : \n                        ext === '.svg' ? 'image/svg+xml' : 'image/jpeg'\n        return { \n          success: true, \n          image: `data:${mimeType};base64,${base64}`,\n          filename: filename + ext\n        }\n      } catch {\n        // Continue to next extension\n      }\n    }\n    \n    return { success: false, error: 'Image not found', image: null }\n  } catch (error) {\n    return { success: false, error: (error as Error).message, image: null }\n  }\n})\n"],"names":[],"mappings":"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"}